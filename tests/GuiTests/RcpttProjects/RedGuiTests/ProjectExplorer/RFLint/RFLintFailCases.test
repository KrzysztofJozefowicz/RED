--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _Q0pU0LpZEee_RrklJFm4zA
Element-Name: RFLintFailCases
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _gjwJoLpnEee_RrklJFm4zA
Runtime-Version: 2.2.0.201706152316
Save-Time: 11/6/17 11:51 AM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

//change to jython interpreter (no RFLint installed)
get-preferences-menu | click
with [get-window Preferences] {
    get-tree | select "Robot Framework/Installed frameworks"
    get-table | get-item -path "Robot Framework .*\\(Jython .*\\)" | check
    get-button "Apply and Close" | click
    get-window "Rebuild required" | get-button OK | click
}

//select project to analyse

//checking if jython path is in error - lower case because path in windows contains "c:" and in error "C:"
get-view "Project Explorer" | get-tree | select "project_a"
exec-with-options {
    get-view "Project Explorer" | get-tree | get-menu -path "Robot Framework/Run RfLint analysis" | click
    get-window "Problem Occurred" | get-label "Error occurred when trying to run RfLint analysis" 
        | get-property caption | equals "Error occurred when trying to run RfLint analysis" | verify-true
        
    //check details    
    get-window "Problem Occurred" | get-button "Details >>" | click
    get-window "Problem Occurred" | get-editbox -after [get-label "See 'Details' for more information."] 
        | get-property text -raw | invoke toLowerCase  | contains [format [str"RuntimeError: There is no rflint module installed for %s%s interpreter"] $jython_path [os-specific "\\jython.exe" "/jython"] | invoke toLowerCase ]
        | verify-true
    get-window "Problem Occurred" | get-button OK | click
} -allowStatusDialog


//check if after clean is error
get-view "Project Explorer" | get-tree | select "project_a" | get-menu -path "Robot Framework/Clean RfLint problems" 
    | click
    
verify-error {get-window "Problem Occurred" }
  
//select python again    
get-preferences-menu | click
with [get-window Preferences] {
    get-table | get-item -path "Robot Framework .*\\(Python .*\\)" | check
    get-button "Apply and Close" | click
    get-window "Rebuild required" | get-button OK | click
}

//set wrong rule value
get-preferences-menu | click
get-window Preferences | get-tree | select "Robot Framework/Errors\\/Warnings/RfLint validation"

with [get-window Preferences] {
    with [get-table] {
        get-item "...add new rule" | double-click
        select Rule | activate-cell-edit -type MouseDoubleClickSelection
        with [get-editbox] {
            set-text LineTooLong
            key-type "NUMPAD_ENTER" "\\u000D"
        }
        apply-cell-edit -deactivate
        select LineTooLong | double-click
        select LineTooLong | activate-cell-edit -column 2 -type MouseDoubleClickSelection
        with [get-editbox] {
            set-text jkl
            key-type "NUMPAD_ENTER" "\\u000D"
        }
        apply-cell-edit -deactivate
    }
    get-button "Apply and Close" | click
}

//run analisys and chrk error
get-view "Project Explorer" | get-tree | select "project_a"
exec-with-options {
    get-view "Project Explorer" | get-tree | get-menu -path "Robot Framework/Run RfLint analysis" | click
    get-window "Problem Occurred" | get-button "Details >>" | click
    get-window "Problem Occurred" | get-editbox -after [get-label "See 'Details' for more information."] 
        | get-property text | contains  "ValueError: invalid literal for int() with base 10: 'jkl'" | verify-true
    get-window "Problem Occurred" | get-button OK | click
} -allowStatusDialog

//delete rule and checkif wa removed
get-preferences-menu | click
get-window Preferences | get-table | select LineTooLong | get-menu -path Delete | click
with [get-window Preferences | get-table] {
    get-property "getItems().length" | equals 1 | verify-true
    get-property "getItems().TableItem[0].getText()" | equals "...add new rule" | verify-true
}

//add new rule that not exists
with [get-window Preferences] {
    with [get-table] {
        get-item "...add new rule" | double-click
        select Rule | activate-cell-edit -type MouseDoubleClickSelection
        with [get-editbox] {
            set-text "my rule"
            key-type Enter
        }
        apply-cell-edit -deactivate
        select "my rule" | double-click
        select "my rule" | activate-cell-edit -column 1 -type MouseDoubleClickSelection
        get-combo | select Warning
        apply-cell-edit -deactivate
    }
    get-button "Apply and Close" | click
}

///run on project
get-view "Project Explorer" | get-tree | select "project_a"
exec-with-options {
    get-view "Project Explorer" | get-tree | get-menu -path "Robot Framework/Run RfLint analysis" | click
    get-window "Problem Occurred" | get-button "Details >>" | click
    get-window "Problem Occurred" | get-editbox -after [get-label "See 'Details' for more information."] 
        | get-property text | contains  "UnknownRuleException: unknown rule: 'my rule'" | verify-true
    get-window "Problem Occurred" | get-button OK | click
} -allowStatusDialog

//remove rule
get-preferences-menu | click
get-window Preferences | get-table | select "my rule" | get-menu -path Delete | click

//add empty python file
set-dialog-result File "platform:/resource/project_b/empty_file.py"
get-window Preferences | get-table -after [get-label "Additional rules files"] | get-item "...add new rules file" | double-click
with [get-window Preferences] {
    get-button "Apply and Close" | click
}
get-view "Project Explorer" | get-tree | select "project_b" | get-menu -path "Robot Framework/Run RfLint analysis" 
    | click
    
verify-error { get-window "Problem Occurred"}    

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
