--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _U5CFwDE7EeWbDptfbJdvqQ
Element-Name: ProjectWithoutRedXmlButWithCorrectProjectFile
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _PG3S0DE7EeWbDptfbJdvqQ
Runtime-Version: 2.1.0.201606221726
Save-Time: 5/9/17 2:00 PM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

try -times 3 -delay 1000 -command{
	//check that project has two icons: robot and syntax tests
	with [get-view "Project Explorer" | get-tree] {
	    get-item OnlyRobotSuiteFile | get-property "image.decorations[0].path" 
	        | equals "org.robotframework.ide.eclipse.main.plugin/resources/decorator_suite_folder.png" | verify-true
	    get-item OnlyRobotSuiteFile | get-property "image.decorations[1].path" 
	        | matches ".*error.*" | verify-true
	}	
}
get-eclipse-window | get-object | save-screenshot [substitute-variables "${workspace_loc}/images/actual.png"]  
//should be one Problem that red.xml doesn't exist

get-tab-folder -index 3 | get-tab-item Problems | click

get-view Problems | get-tree  | select "Errors .*" | double-click

with [get-view Problems | get-tree] {
    get-item "Errors \\(1 item\\)" | get-property caption | equals "Errors (1 item)" | verify-true
    get-item "Errors \\(1 item\\)/FATAL: project configuration file red.xml does not exist" | get-property caption 
        | equals "FATAL: project configuration file red.xml does not exist" | verify-true
}
//check how fix window looks like
get-view Problems | get-tree | select "Errors (1 item)/FATAL: project configuration file red.xml does not exist" 
    | get-menu "Quick Fix" | click
with [get-window "Quick Fix"] {
    get-table | get-item "Create configuration file" | get-property caption | equals "Create configuration file" 
        | verify-true
    with [get-table -after [get-label "Problems:"]] {
        get-property "columns[0].caption" | equals Resource | verify-true
        get-property "columns[1].caption" | equals Location | verify-true
        get-item ".project" | get-property "values['Location']" | equals "line 1" | verify-true
        get-item ".project" | get-property "values['Resource']" | equals ".project" | verify-true
    }
}
//Use quick fix
get-window "Quick Fix" | get-button Finish | click

//check if red.xml and libscecs were added
with [get-view "Project Explorer" | get-tree] {
    get-item OnlyRobotSuiteFile | get-property "getItems().length" | equals 3 | verify-true
    get-item OnlyRobotSuiteFile | get-property "getItems().TreeItem[0].getText()" 
        //| equals "Robot Standard libraries [Robot Framework 2.8.7 (Python 2.7.8 on win32)]" | verify-true
        | equals [format "Robot Standard libraries [%s]" $robot_version ]| verify-true
    get-item OnlyRobotSuiteFile | get-property "getItems().TreeItem[1].getText()" | equals "red.xml" | verify-true
    get-item OnlyRobotSuiteFile | get-property "getItems().TreeItem[2].getText()" 
        | equals "SimpleLoggingTestCase.robot" | verify-true
}

//check if libspec are created

get-view "Project Explorer" | get-tree 
    | select [format "OnlyRobotSuiteFile/Robot Standard libraries [%s]" $robot_version] | double-click
    

with [get-view "Project Explorer" | get-tree] {
    get-item "OnlyRobotSuiteFile/Robot Standard libraries .*]" 
        | get-property childCount -raw | let [val number_of_tems -input]{
        $number_of_tems |gt 10 | assert-true -message [format "Number of items: %s" $number_of_tems]
        
      }    
}


if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{
	exec-process [format "\"python.exe\"  \"%s/Settings/PythonScripts/StdLibrariesReaderWithNoRemote.py\"" $RCPTT_project_path]
			| get stdout | split -sep " " -trimResults | to-list | let [val libs_from_python -input]{
			get-view "Project Explorer" | get-tree 
			    | get-item "OnlyRobotSuiteFile/Robot Standard libraries .*" | get-items 
			    |foreach [val i]{
			    $i |get-object |invoke getText }| to-list |each [val lib] [val index]
			    {
			    	 $lib | matches [concat [$libs_from_python |get $index] " \(\\d+\)"] |assert-true -message [concat [$libs_from_python |get $index] " \(\\d+\)"]
			    }
	    }
    
}-else{
	
		exec-process  "python"  [format "%s/Settings/PythonScripts/StdLibrariesReaderWithNoRemote.py" $RCPTT_project_path]
			| get stdout | split -sep " " -trimResults | to-list | let [val libs_from_python -input]{
			get-view "Project Explorer" | get-tree 
			    | get-item "OnlyRobotSuiteFile/Robot Standard libraries .*" | get-items 
			    |foreach [val i]{
			    $i |get-object |invoke getText }| to-list |each [val lib] [val index]
			    {	
			    	 if [$lib | not-eq "Dialogs (non-accessible)"]{
			    	 $lib | matches [concat [$libs_from_python |get $index] " \(\\d+\)"] |assert-true -message [format "'%s' %s %s" $lib $index [$libs_from_python |get $index]]
			    	}-else{
			    		$lib | equals [concat [$libs_from_python |get $index] " (non-accessible)"] |assert-true -message [format "'%s' %s %s" $lib $index [$libs_from_python |get $index]]
			    	}
			    	
			    }
	    }
		
}
//check if only robot icon is shown
get-view "Project Explorer" | get-tree | get-item OnlyRobotSuiteFile | get-property "image.decorations[0].path" 
    | equals "org.robotframework.ide.eclipse.main.plugin/resources/decorator_suite_folder.png" | verify-true

get-view "Project Explorer" | get-tree | verify-error {get-item OnlyRobotSuiteFile |  equals "org.eclipse.jdt.ui/icons/full/ovr16/error_co.gif" |get-property "image.decorations[1].path" }


//run test    
get-view "Project Explorer" | get-tree | select "OnlyRobotSuiteFile/SimpleLoggingTestCase.robot" | double-click
get-button "Run.*" | click

//check Message log    
get-view "Message Log" | get-editbox | get-property text | matches [concat "Starting test: OnlyRobotSuiteFile\.SimpleLoggingTestCase\.firstTest\n" 
[concat_str_with_regex [list  "1\\n"  "\\$\\{variable\\} = 10\\n"  "10"]] "\nEnding test: OnlyRobotSuiteFile\.SimpleLoggingTestCase\.firstTest"]| verify-true

//check console log
get-view Console | get-text-viewer | get-property text 
    | equals "Command: .* -m robot.run --listener .*TestRunnerAgent.py:\d{1,6} --argumentfile .*\.arg .*OnlyRobotSuiteFile\n"
    + "Suite Executor: Robot Framework .* \(Python .*\)\n"
    + "==============================================================================\n"
    + "OnlyRobotSuiteFile                                                            \n"
    + "==============================================================================\n"
    + "OnlyRobotSuiteFile.SimpleLoggingTestCase                                      \n"
    + "==============================================================================\n"
    + "firstTest                                                             \| PASS \|\n"
    + "------------------------------------------------------------------------------\n"
    + "OnlyRobotSuiteFile.SimpleLoggingTestCase                              \| PASS \|\n"
    + "1 critical test, 1 passed, 0 failed\n"
    + "1 test total, 1 passed, 0 failed\n"
    + "==============================================================================\n"
    + "OnlyRobotSuiteFile                                                    \| PASS \|\n"
    + "1 critical test, 1 passed, 0 failed\n"
    + "1 test total, 1 passed, 0 failed\n"
    + "==============================================================================\n"
    + "Output:  .*output.xml\n"
    + "Log:     .*log.html\n"
    + "Report:  .*report.html" | verify-true
  

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
