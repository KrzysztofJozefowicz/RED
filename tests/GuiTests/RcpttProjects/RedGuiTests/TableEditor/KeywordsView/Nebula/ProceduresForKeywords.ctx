--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: ProceduresForKeywords
Element-Type: context
Element-Version: 2.0
Id: _YI1vUFJyEea8WJ7bbC6OBw
Runtime-Version: 2.1.0.201606221726
Save-Time: 8/8/16 3:18 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc "my-assert-true" [val result -input] [val expected] [val col] [val row] {	
	$result | eq $expected | assert-true -message [format "Value in row %s, colum %s should be: '%s', but is '%s'" $row $col $expected $result]
}


//HINT: do not use hexstring in comments! As parameter in procedure they are converted to decimal value

//rows starts from 1
proc "check-keyword-row" [val file] [val row] [val kw ""] [val c1 ""] [val c2 ""] [val c3 "" ] [val c4 "" ] [val c5 "" ] [val comment "" ]
{
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1 | get-object | invoke getCellByPosition 1 $row|  invoke getDataValue 
		| my-assert-true -expected $kw -row $row -col 1 
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 2 $row|  invoke getDataValue 
	    | my-assert-true -expected $c1 -row $row -col 1 
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 3 $row|  invoke getDataValue 
	    | my-assert-true -expected $c2 -row $row -col 1 
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 4 $row|  invoke getDataValue 
	    | my-assert-true -expected $c3 -row $row -col 1 
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 5 $row|  invoke getDataValue 
	    | my-assert-true -expected $c4 -row $row -col 1     
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 6 $row|  invoke getDataValue 
	    | my-assert-true -expected $c5 -row $row -col 1 
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 7 $row|  invoke getDataValue 
	    | my-assert-true -expected $comment -row $row -col 1 
}

//proc "check-markers-in-table"  [val file] [val type ERROR] [val lines]  {
//
//	$lines | each [val line]{
//		get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object 
//		    | invoke getLayer| invoke getConfigLabelsByPosition 0 $line|  invoke getLabels  |invoke contains $type
//		        | equals true | assert-true -message [format "In line %s is no marker" $line]
//	}
//
//}
//
//proc "check-no-markers-in-table" [val file] [val lines]  {
//
//	$lines | each [val line]{
//		get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object 
//		    | invoke getLayer| invoke getConfigLabelsByPosition 0 $line|  invoke getLabels  |invoke contains ERROR
//		        | equals false | assert-true -message [format "In line %s should be no marker but is ERROR." $line]
//		        
//		get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object 
//		    | invoke getLayer| invoke getConfigLabelsByPosition 0 $line|  invoke getLabels  |invoke contains WARNING
//		        | equals false | assert-true -message [format "In line %s should be no marker but is WARNING." $line]	        
//	}
//
//}

proc "compare-markers-list-with-ref" [val markers -input] [val ref_markers] [val type]{

	$ref_markers |each [val el] [val index]{
			$el | eq [$markers | get $index] | equals true | assert-true -message [format "In line %s should be marker %s but is %s." $el $type [$markers | get $index]]
	}
}

proc "set-list-with-markers-and-comapare"  [val file] [val ref_list] [val type "ERROR"] {
	get-editor  $file| get-canvas -after [get-label "User Keywords"] -index 1 
	    | get-property "getLayer().getBodyLayer().getRowCount()" -raw | int | let [val row_count -input]{
	    
			repeat [val row] -times $row_count -command{
				if [get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object 
					    | invoke getLayer| invoke getConfigLabelsByPosition 0 $row|  invoke getLabels  |invoke contains $type | eq true]{
					   		echo $row
				}
					    
			} | to-list | compare-markers-list-with-ref  -ref_markers $ref_list -type $type
		
		}
}

proc "compare-row-with-list" [val file]  [val col_amount] [val row] [val ref_table]
{	
	repeat [val index] -times $col_amount -command{
		$ref_table | get $index| let [val ref_value -input]{
			get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1 | get-object | invoke getCellByPosition [plus $index 1] $row | invoke getDataValue 
			     |  my-assert-true -expected  $ref_value -row $row -col [plus $index 1]
		} 
	}
}

//rows starts from 0
proc "is-row-fully-selected" [val row]{
	get-editor "TestFile.robot" | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getLayer | invoke getBodyLayer | invoke getScrollableLayer
			| invoke getUnderlyingLayerByPosition 0 0 | invoke isRowPositionFullySelected  $row | eq true | verify-true
	
	get-editor "TestFile.robot" | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getLayer | invoke getBodyLayer | invoke getScrollableLayer
			| invoke getUnderlyingLayerByPosition 0 0 | invoke hasRowSelection | eq true | verify-true
					
	get-editor "TestFile.robot" | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getLayer | invoke getBodyLayer | invoke getScrollableLayer
		| invoke getUnderlyingLayerByPosition 0 0 | invoke getSelectedRowCount | eq 1 | verify-true
} 


------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
