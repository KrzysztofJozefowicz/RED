--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _eXb6MPp7EeW7_PzjO98BIw
Element-Name: AddingValuesToPYTHONPATH
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _xmkpUP_xEeWRL4nRKA71zA
Runtime-Version: 2.1.0.201606221726
Save-Time: 3/20/17 9:59 AM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

proc "comapre-paths" [val rp]{
	set-dialog-result File [get-arg-file-path]
	get-menu "File/Open File..." | click    
	
	get-editor "args_.*.arg" | get-text-viewer | get-property text | matches [format "# arguments automatically generated\n"
    + "--pythonpath %s:%s:%s:%s:%s:%s:%s:%s\n"
    + "--suite      RobotProject.Lib_with_variable" $rp $rp $rp $rp $rp $rp $rp $rp] | verify-true
    
	get-editor "args_.*.arg" | close 
}

proc "check-arg-file-for-relative-path" [val project_name ""]{
	//set paths to regexp - if path is relative to WS then project_name is empty
	if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{   
		 replace -input $RED_workspace_path -old "\\" -new "\\\\" | let [val new_ws_path -input]{    
			comapre-paths [format "(%s\\\\b|%s\\\\\"escpaed\\\\text\"|%s\\\\correct tab \\\\folder|%s\\\\a|\\\\!@#\$%%path\\\\new.file.txt|C:\\\\folder\\\\folder2|%s\\\\RobotProject\\\\libs|%s\\\\not existing)" $new_ws_path $new_ws_path $new_ws_path $new_ws_path $new_ws_path $new_ws_path]
//			format "(%s\\\\b|%s\\\\\"escpaed\\\\text\"|%s\\\\correct tab \\\\folder|%s\\\\a|\\\\!@#\$%%path\\\\new.file.txt|C:\\\\folder\\\\folder2|%s\\\\RobotProject\\\\libs|%s\\\\not existing)" $new_ws_path $new_ws_path $new_ws_path $new_ws_path $new_ws_path $new_ws_path | log
	    }
	}-else{
		comapre-paths [format "(/!@#\$%%path/new.file.txt|%s/b|%s/not existing|%s/a|%s/RobotProject/libs|%s/correct tab /folder)" $RED_workspace_path $RED_workspace_path $RED_workspace_path $RED_workspace_path $RED_workspace_path]
	}
	 
	
}

//reset server
get-view "Project Explorer" | get-tree | select RobotProject | get-menu "Robot Framework/Reset Robot Environment" 
    | click
    
//remove autodiscover
get-view "Project Explorer" | get-tree | select "RobotProject/red.xml" | double-click

wait-for-loading-red-xml "RobotProject/red.xml"

with [get-editor "RobotProject/red.xml"] {
    get-tab-folder | get-tab-item "Referenced libraries" | click
    with [get-section "Referenced libraries" | get-button "Auto discover libraries after test suite save action"] {
        uncheck
        key-type "M1+s"
    }
}

//add Library "add" to Suite
get-view "Project Explorer" | get-tree | select "RobotProject/lib_with_variable.robot" | double-click
with [get-editor "lib_with_variable.robot" | get-text-viewer] {
    set-caret-pos 3 20
    select-range 4 19 2 11
    type-text add
    key-type "M1+s"
}

//run test
get-view "Project Explorer" | get-tree | select "RobotProject/lib_with_variable.robot" 
    | select "RobotProject/lib_with_variable.robot" | get-menu "Run As/1 Robot Test" | click

try -times 8 -delay 1000 -command{
		get-view Console | get-button Terminate | get-property "isEnabled()" | equals false | verify-true
}
    
//check error on console    
get-view Console | get-text-viewer | get-property text 
    | contains " Importing test library 'add' failed: ImportError: No module named add\n" | verify-true
get-tab-folder -index 1 | get-tab-item "RobotProject/red.xml" | click

//add path to lib to red.xml
get-editor "RobotProject/red.xml" | get-section Paths | get-table | get-item "...add new search path" |double-click
with [get-window "Add new search path"] {
    get-editbox -after [get-label "Provide search paths to be added. Each path should be specified in separate line."] 
        | set-text [format "%s/RobotProject/libs" $RED_workspace_path]
    get-button OK | click
 
}
wait 300
get-button "Save \((Ctrl|M1)\+S\)" | click
//run test
get-tab-folder -index 1 | get-tab-item "lib_with_variable.robot" | click
get-view "Project Explorer" | get-tree | select "RobotProject/lib_with_variable.robot" 
    | select "RobotProject/lib_with_variable.robot" | get-menu "Run As/1 Robot Test" | click
    
try -times 5 -delay 1000 -command{
	get-view Console | get-button Terminate | get-property "isEnabled()" | equals false | verify-true
}    

//check that error is not shown
get-view Console | get-text-viewer | get-property text 
    | contains " Importing test library 'add' failed: ImportError: No module named add\n" | verify-false
        
get-tab-folder -index 1 | get-tab-item "RobotProject/red.xml" | click
wait 500

//add diffrent path ("a" is double)
get-editor "RobotProject/red.xml" | get-section Paths | get-table | select  [get-item "...add new search path" ]
get-editor "RobotProject/red.xml" | get-section Paths | get-table | get-item "...add new search path" | double-click
with [get-window "Add new search path"] {
    with [get-editbox 
        -after [get-label "Provide search paths to be added. Each path should be specified in separate line."]] {
        set-text "not existing\n"
            + "C:\\folder\\folder2\n"
            + "/!@#$%path/new.file.txt\n"
            + "\"escpaed\\\\text\"\n\n"
            + "correct\ttab\t/folder\n"
            + "a\n"
            + "b\n"
            + "a"
    }
    get-button OK | click
}

get-button "Save \((Ctrl|M1)\+S\)" | click

//run test and check that pythonpath args were added do robot
get-tab-folder -index 1 | get-tab-item "lib_with_variable.robot" | click
get-view "Project Explorer" | get-tree | select "RobotProject/lib_with_variable.robot" | get-menu "Run As/1 Robot Test" 
    | click

wait 500

//this is added because test: AddLibraryToRedXmlByQuickFix was affecing this test
get-menu "Project/Clean..." | click
get-window Clean | get-button OK | click
 
//expand erorrs
get-view Problems | get-tree | get-item "Errors \\(.* items\\)" | expand-all
get-view Problems | get-tree | get-item "Warnings \\(.* items\\)" | expand-all
    
//check first line to see pythonapth (extarcted due to long syntax) 
if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{   
	check-arg-file-for-relative-path
	//check warnings
	
	with [get-view Problems] {
	    get-label "16 errors, 7 warnings, 0 others" | get-property caption | equals "16 errors, 7 warnings, 0 others" 
	        | verify-true
	       
		with [get-tree] {
	       get-item "Warnings \\(7 items\\)/.*new.file.txt' points to non-existing location" | get-property caption 
	       		| equals "The path '\\!@#$%path\\new.file.txt' points to non-existing location" | verify-true
		   
		   get-item "Warnings \\(7 items\\)/The path 'C:\\folder\\folder2' points to non-existing location" 
        		| get-property caption | equals "The path 'C:\\folder\\folder2' points to non-existing location" | verify-true
        
		   get-item "Warnings \\(7 items\\)/The path .*text.* points to non-existing location"
		        | get-property caption 
		        | equals [format "The path '%s\\\"escpaed\\text\"' points to non-existing location" $RED_workspace_path ] | verify-true

           get-item "Warnings \\(7 items\\)/The path '.*a' points to non-existing location" 
        		| get-property caption | equals [format "The path '%s\\a' points to non-existing location" $RED_workspace_path]
        		| verify-true
		        
		    get-item "Warnings \\(7 items\\)/The path .*b' points to non-existing location" 
		        | get-property selection | equals false | verify-true
		    get-item "Warnings \\(7 items\\)/The path '.*folder' points to non-existing location" 
		        | get-property caption 
		        | equals "The path '.*folder' points to non-existing location" | verify-true
		    get-item "Warnings \\(7 items\\)/The path '.*not existing' points to non-existing location" | get-property caption 
		        | equals [format "The path '%s\\n"
		        + "ot existing' points to non-existing location" $RED_workspace_path ]| verify-true
		}
	    //check fonts colour in table
	    with [get-editor "RobotProject/red.xml" | get-section Paths | get-table] {
		    get-item ".*RobotProject\\/libs" | get-property "styles[0].fontStyle"|  equals normal 
		    | verify-true
		    get-item "not existing" | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
		    get-item "C:\\folder\\folder2" | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
		    get-item "\\/!@#$%path\\/new.file.txt" | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
		    get-item "\"escpaed\\\\text\"" | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
	
		    get-item "correct tab \\/folder" | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
		    get-item a | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
		    get-item b | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
		}
	}

}-else{
	check-arg-file-for-relative-path
		
	//check warning
	get-tab-folder -index 4 | get-tab-item Problems | click
	get-view Problems | get-label "18 errors, 5 warnings, 0 others" | get-property caption 
    | equals "18 errors, 5 warnings, 0 others" | verify-true
    
    
	with [get-view Problems | get-tree] {
		    get-item "Warnings \\(5 items\\)/The path '\\/!@#$%path\\/new.file.txt' points to non-existing location" 
		        | get-property caption | equals "The path '/!@#$%path/new.file.txt' points to non-existing location" 
		        | verify-true
		    get-item "Warnings \\(5 items\\)/The path '.*a' points to non-existing location" 
		        | get-property caption | equals [format "The path '%s/a' points to non-existing location" $RED_workspace_path]
		        | verify-true
		    get-item "Warnings \\(5 items\\)/The path '.*b' points to non-existing location" 
		        | get-property caption | equals [format "The path '%s/b' points to non-existing location"  $RED_workspace_path]
		        | verify-true
		    get-item "Warnings \\(5 items\\)/The path '.*folder' points to non-existing location" 
		        | get-property caption 
		        | equals [format "The path '%s/correct tab /folder' points to non-existing location"  $RED_workspace_path]
		        | verify-true
		    get-item "Warnings \\(5 items\\)/The path '.*not existing' points to non-existing location" 
		        | get-property caption 
		        | equals [format "The path '%s/not existing' points to non-existing location"  $RED_workspace_path]
		        | verify-true
		}
	
	with [get-view Problems | get-tree] {
	    get-item "Errors \\(18 items\\)/The path '\"escpaed\\\\text\"' is invalid" | get-property caption 
	        | equals "The path '\"escpaed\\\\text\"' is invalid" | verify-true
	    get-item "Errors \\(18 items\\)/The path 'C:\\folder\\folder2' is invalid" | get-property caption 
	        | equals "The path 'C:\\folder\\folder2' is invalid" | verify-true
	}

}

//check console
get-view Console | get-text-viewer | get-property text 
    | equals "Command:.* -m .* --listener.* --argumentfile .*\n"  
    + "Suite Executor: Robot Framework .*\n"
    + "==============================================================================\n"
    + "RobotProject                                                                  \n"
    + "==============================================================================\n"
    + "RobotProject.Lib With Variable                                                \n"
    + "==============================================================================\n"
    + "test                                                                  \| PASS \|\n"
    + "------------------------------------------------------------------------------\n"
    + "RobotProject.Lib With Variable                                        \| PASS \|\n"
    + "1 critical test, 1 passed, 0 failed\n"
    + "1 test total, 1 passed, 0 failed\n"
    + "==============================================================================\n"
    + "RobotProject                                                          \| PASS \|\n"
    + "1 critical test, 1 passed, 0 failed\n"
    + "1 test total, 1 passed, 0 failed\n"
    + "==============================================================================\n"
    + "Output:  .*output.xml\n"
    + "Log:     .*log.html\n"
    + "Report:  .*report.html"| verify-true

	    

//add more items to path    
get-tab-folder -index 1 | get-tab-item "RobotProject/red.xml" | click
get-editor "RobotProject/red.xml" | get-section Paths | get-table | select  [get-item "...add new search path" ]
get-editor "RobotProject/red.xml" | get-section Paths | get-table | get-item "...add new search path" | double-click
with [get-window "Add new search path"] {
    with [get-editbox 
        -after [get-label "Provide search paths to be added. Each path should be specified in separate line."]] {
        set-text "scrolbar\na\nb\nc\nd"
    }
    wait 500
    get-button OK | click
}

//check that scrollbbar is shown
get-editor "RobotProject/red.xml" | get-section Paths | get-table | get-property "getVerticalBar().isEnabled()" 
    | equals true | verify-true
   
//maximize
with [get-tab-folder -index 1] {
    double-click
    get-tab-item "*RobotProject/red.xml" | click
}
    
//check if new items were added (b is duplicated)    
get-editor "RobotProject/red.xml" | get-section Paths | get-table | get-property itemCount -raw | int | minus 12| let [val nr_of_paths -input]{
	
	with [get-editor "RobotProject/red.xml" | get-section Paths | get-table] {
	    get-property [format "getItems().TableItem[%s].getText()" [plus 0 $nr_of_paths]] | equals [format "%s/RobotProject/libs" $RED_workspace_path] | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 1 $nr_of_paths]] | equals "not existing" | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 2 $nr_of_paths]] | equals "C:\\folder\\folder2" | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 3 $nr_of_paths]] | equals "/!@#$%path/new.file.txt" | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 4 $nr_of_paths]]| equals "\"escpaed\\\\text\"" | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 5 $nr_of_paths]] | equals "correct tab /folder" | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 6 $nr_of_paths]] | equals a | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 7 $nr_of_paths]] | equals b | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 8 $nr_of_paths]] | equals scrolbar | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 9 $nr_of_paths]] | equals c | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 10 $nr_of_paths]] | equals d | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 11 $nr_of_paths]]| equals "...add new search path" | verify-true
	}
}

//minimize
with [get-tab-folder] {
    double-click
    get-tab-item "*RobotProject/red.xml" | click
}


with [get-editor "RobotProject/red.xml" | get-section Paths | get-table] {
	//select 2 item next to each other and one not
    select "\\/!@#$%path\\/new.file.txt" "\"escpaed\\\\text\"" "d"
    key-type Del
    
    //select one
    select scrolbar | key-type Del
}
get-editor "RobotProject/red.xml" | get-section Paths | get-table | get-property itemCount -raw | int | minus  8 | let [val nr_of_paths -input]{
	with [get-editor "RobotProject/red.xml" | get-section Paths | get-table] {
	    get-property [format "getItems().TableItem[%s].getText()" [plus 0 $nr_of_paths]] | equals [format "%s/RobotProject/libs" $RED_workspace_path] | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 1 $nr_of_paths]]| equals "not existing" | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 2 $nr_of_paths]] | equals "C:\\folder\\folder2" | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 3 $nr_of_paths]] | equals "correct tab /folder"  | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 4 $nr_of_paths]] | equals a | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 5 $nr_of_paths]] | equals b | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 6 $nr_of_paths]] | equals c | verify-true
	    get-property [format "getItems().TableItem[%s].getText()" [plus 7 $nr_of_paths]]| equals "...add new search path" | verify-true
	}
}	
	
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
