--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _ECH_IISiEeWImNPXuPy_LQ
Element-Name: LinksToResourceInSourceView
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _Pko4gIbxEeWrUbOa1Nzguw
Runtime-Version: 2.0.1.201508250612
Save-Time: 2/3/16 3:35 PM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

//open test
with [get-view "Project Explorer" | get-tree] {
    select MediumRobotTest | double-click
    select "MediumRobotTest/TestFile.robot" | double-click
}

//open "../SecondProject/res2/res.robot" - file from second project
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 3 27
    open-declaration
}
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "TestFile.robot" | verify-true
    get-property "pages[1]" | equals "res.robot" | verify-true
    get-property activePage | equals "res.robot" | verify-true
    get-property tabCount | equals 2 | verify-true
}
get-editor "res.robot" | get-text-viewer | get-property text | equals "*** Variables ***\n"
    + "${sc_2}  18\n\n"
    + "*** Keywords ***\n"
    + "from res 2 second project\n"
    + "    Log  ${sc_2}" | verify-true
    
//open file from the same project: "res2/res.robot"
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 9 21
    open-declaration
}
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "TestFile.robot" | verify-true
    get-property "pages[1]" | equals "res.robot" | verify-true
    get-property "pages[2]" | equals "res.robot" | verify-true
    get-property activePage | equals "res.robot" | verify-true
    get-property tabCount | equals 3 | verify-true
}
get-editor "res.robot" -index 1 | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Resource    ../../SecondProject/res2/res.robot\n"
    + "Resource    ../res1/res3/res.robot\n\n"
    + "*** Variables ***\n"
    + "${a}  5\n"
    + "${this is duplicate}  22    \n"
    + "@{list2}  text  text2\n\n"
    + "*** Keywords ***\n"
    + "from res 2\n"
    + "    Log  ${a}\n"
    + "    Log  ${sc_2} \n"
    + "    Log  ${c}\n\n"
    + "kw duplicate\n"
    + "    Log  this is duplicate from /res2.res.robot" | verify-true
    
//open file with spaces: "../SecondProject/res1/res3/second project res.robot"
get-tab-folder -index 1 | get-tab-item "TestFile.robot" | click
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 6 58
    open-declaration
}
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "TestFile.robot" | verify-true
    get-property "pages[1]" | equals "res.robot" | verify-true
    get-property "pages[2]" | equals "res.robot" | verify-true
    get-property "pages[3]" | equals "second project res.robot" | verify-true
    get-property activePage | equals "second project res.robot" | verify-true
    get-property tabCount | equals 4 | verify-true
}
get-editor "second project res.robot" | get-text-viewer | get-property text | equals "*** Variables ***\n"
    + "${var from second project}   0\n"
    + "@{list form second project}  ${var from second project}   9\n\n"
    + "*** Keywords ***\n"
    + "second_project_kw\n"
    + "    Log  second project kw" | verify-true
    
//open .txt file    
get-tab-folder -index 1 | get-tab-item "TestFile.robot" | click
with [get-editor "TestFile.robot" | get-text-viewer] {
    hover-text 16 19 -with M1
    set-caret-pos 16 19
    open-declaration
}
get-editor "text_file.txt" | get-text-viewer | get-property text | equals "*** Variables ***\n"
    + "${from_txt_res}    99\n"
    + "@{list_from_txt_res}    jj  kk\n\n\n"
    + "*** Keywords ***\n"
    + "keyword from txt file\n"
    + "    Log  txt file!" | verify-true
    
    
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "TestFile.robot" | verify-true
    get-property "pages[1]" | equals "res.robot" | verify-true
    get-property "pages[2]" | equals "res.robot" | verify-true
    get-property "pages[3]" | equals "second project res.robot" | verify-true
    get-property "pages[4]" | equals "text_file.txt" | verify-true
    get-property activePage | equals "text_file.txt" | verify-true
    get-property tabCount | equals 5 | verify-true
}


//open filie with capital letter: "../SecondProject/res1/res3/RES.ROBOT"

get-tab-folder -index 1 | get-tab-item "TestFile.robot" | click
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 4 41
    open-declaration
}
get-editor "RES.ROBOT" | get-text-viewer | get-property text | equals "*** Variables ***\n"
    + "${sc_3}  17\n\n\n"
    + "*** Keywords ***\n"
    + "from res 3 second project\n"
    + "    Log  ${sc_3}" | verify-true


with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "TestFile.robot" | verify-true
    get-property "pages[1]" | equals "res.robot" | verify-true
    get-property "pages[2]" | equals "res.robot" | verify-true
    get-property "pages[3]" | equals "second project res.robot" | verify-true
    get-property "pages[4]" | equals "text_file.txt" | verify-true
    get-property "pages[5]" | equals "RES.ROBOT" | verify-true
    get-property activePage | equals "RES.ROBOT" | verify-true
    get-property tabCount | equals 6 | verify-true
}

//open res.robot
with [get-tab-folder -index 1] {
    get-tab-item "res.robot" | click
}
//set text to file that exist but with capital letters are extension
get-editor "res.robot" | get-text-viewer | set-text "*** Settings ***\n"
    + "Resource    ../res1/res3/res.ROBOT" 
    
with [get-editor "res.robot" | get-text-viewer] {
    hover-text 2 24 -with M1
    set-caret-pos 2 25
    open-declaration
}

//editor should not be open
get-editor "res.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Resource    ../res1/res3/res.ROBOT" | verify-true
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "TestFile.robot" | verify-true
    get-property "pages[1]" | equals "*res.robot" | verify-true
    get-property "pages[2]" | equals "res.robot" | verify-true
    get-property "pages[3]" | equals "second project res.robot" | verify-true
    get-property "pages[4]" | equals "text_file.txt" | verify-true
    get-property "pages[5]" | equals "RES.ROBOT" | verify-true
    get-property activePage | equals "*res.robot" | verify-true
    get-property tabCount | equals 6 | verify-true
}

// use system specific slash using robot variable ${/}
get-tab-folder -index 1 | get-tab-item "TestFile.robot" | click
get-view "Project Explorer" | get-tree | select "MediumRobotTest/res2/res.robot" | double-click
get-tab-folder -index 1 | get-tab-item "TestFile.robot" | click
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 9 17
    key-type Delete
    type-text "${/}"
}

with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 26 1
    type-text "   from res 2"
}

// KW is recognised
get-tab-folder -index 4 | get-tab-item Problems | click
//expand Problems
get-view Problems | get-tree | select "Errors \\(.* items\\)" | double-click

if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{   
	get-view Problems | get-tree | get-item "Errors \\(2 items\\)" | get-property childCount | equals 2 | verify-true
	with [get-view Problems | get-tree] {
	    get-item "Errors \\(2 items\\)" | get-property "getItems().TreeItem[0].getText()" 
	        | equals "Resource import '../res1/res3/res.ROBOT' is invalid: file does not exist" | verify-true
	    get-item "Errors \\(2 items\\)" | get-property "getItems().TreeItem[1].getText()" 
	        | equals "Resource import 'Capture.JPG' is invalid: given file is not a Resource file" | verify-true
		}
}-else{
	get-view Problems | get-tree | get-item "Errors \\(3 items\\)" | get-property childCount | equals 3 | verify-true
}


// Check if ${CURDIR} is recognised
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 9 25
    open-declaration
}
get-editor "res.robot" -index 1 | get-text-viewer | set-caret-pos 9 1

// append ${CURDIR} to one of recognised resources
get-tab-folder -index 1 | get-tab-item "*TestFile.robot" | click
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 9 13
    type-text "${CURDIR}/"


}
// there should be no more errors than previously 2/3
if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{   
	get-view Problems | get-tree | get-item "Errors \\(2 items\\)" | get-property childCount | equals 2 | verify-true
	with [get-view Problems | get-tree] {
	    get-item "Errors \\(2 items\\)" | get-property "getItems().TreeItem[0].getText()" 
	        | equals "Resource import '../res1/res3/res.ROBOT' is invalid: file does not exist" | verify-true
	    get-item "Errors \\(2 items\\)" | get-property "getItems().TreeItem[1].getText()" 
	        | equals "Resource import 'Capture.JPG' is invalid: given file is not a Resource file" | verify-true
	}
}-else{
	get-view Problems | get-tree | get-item "Errors \\(3 items\\)" | get-property childCount | equals 3 | verify-true
}


get-editor "res.robot" -index 1 | get-text-viewer | set-caret-pos 9 1

// check if env variable are supported %{HOME} - as this is env var, path is parametrised and error should be rised
get-tab-folder -index 1 | get-tab-item "*TestFile.robot" | click
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 9 13
    type-text "%{HOME}/"
    wait 1000
    }
    
// there should be no more errors than previously 5 as now path is parametrised 
if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{   
	get-view Problems | get-tree | get-item "Errors \\(4 items\\)" | get-property childCount | equals 4 | verify-true
	with [get-view Problems | get-tree] {
	    get-item "Errors \\(4 items\\)" | get-property "getItems().TreeItem[0].getText()" 
	        | equals "Resource import '../res1/res3/res.ROBOT' is invalid: file does not exist" | verify-true
	    get-item "Errors \\(4 items\\)" | get-property "getItems().TreeItem[1].getText()" 
	        | equals "Resource import 'Capture.JPG' is invalid: given file is not a Resource file" | verify-true
	    get-item "Errors \\(4 items\\)" | get-property "getItems().TreeItem[2].getText()" 
	        | equals "The library name/path '%{HOME}/${CURDIR}/res2${/}res.robot' is parameterized. Some of used parameters cannot be resolved. Use Variable mappings in red.xml for parameter resolution" 
	        | verify-true
	    get-item "Errors \\(4 items\\)" | get-property "getItems().TreeItem[3].getText()" 
	        | equals "Unknown keyword 'from res 2'" | verify-true
	}
}-else{
	get-view Problems | get-tree | get-item "Errors \\(5 items\\)" | get-property childCount | equals 5 | verify-true
}

//---------------------- checking {execDir} and {outputdir} ----------------------------------------------------------------

//add new resource with execDir
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 18 1
    type-text "Resource  ${execDir}"
    key-type "M1+s"

}
wait 1000
replace -input [get-workspace-location] -old "\\" -new "/" | let [val project_path -input ]{
	//check error to see path
	if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{   
		get-view Problems | get-tree 
		    | get-item "Errors \\(5 items\\)/.*is invalid: given location does not point to a file" 
		    | get-property caption 
		    | equals [format "Resource import '%s/MediumRobotTest' is invalid: given location does not point to a file" $project_path]
		    | verify-true
	}-else{
		get-view Problems | get-tree 
	    | get-item "Errors \\(6 items\\)/.*is invalid: given location does not point to a file" 
	    | get-property caption 
	    | equals [format "Resource import '%s/MediumRobotTest' is invalid: given location does not point to a file" $project_path]
	    | verify-true
	}
    
	//add file name
	with [get-editor "TestFile.robot" | get-text-viewer] {
	    set-caret-pos 18 21
	    type-text "/"
	    type-text "text_file.txt"
	}
	wait 1000
	//open declaration
	with [get-editor "TestFile.robot" | get-text-viewer] {
	    set-caret-pos 18 29
	    open-declaration
	}
	get-tab-folder -index 1 | get-property activePage | equals "text_file.txt" | verify-true
	
	//check that error is gone
	if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{  
		with [get-view Problems | get-tree] {
		    get-item "Errors \\(4 items\\)" | get-property "getText()" | equals "Errors (4 items)" | verify-true
		    get-item "Errors \\(4 items\\)" | get-property "getItems().TreeItem[0].getText()" 
		        | equals "Resource import '../res1/res3/res.ROBOT' is invalid: file does not exist" | verify-true
		    get-item "Errors \\(4 items\\)" | get-property "getItems().TreeItem[1].getText()" 
		        | equals "Resource import 'Capture.JPG' is invalid: given file is not a Resource file" | verify-true
		    get-item "Errors \\(4 items\\)" | get-property "getItems().TreeItem[2].getText()" 
		        | equals "The library name/path '%{HOME}/${CURDIR}/res2${/}res.robot' is parameterized. Some of used parameters cannot be resolved. Use Variable mappings in red.xml for parameter resolution" 
		        | verify-true
		    get-item "Errors \\(4 items\\)" | get-property "getItems().TreeItem[3].getText()" 
		        | equals "Unknown keyword 'from res 2'" | verify-true
		}
	}-else{
		with [get-view Problems | get-tree] {
		    get-item "Errors \\(5 items\\)" | get-property "getItems().length" | equals 5 | verify-true
		    get-item "Errors \\(5 items\\)" | get-property "getItems().TreeItem[0].getText()" 
		        | equals "Resource import '../res1/res3/res.ROBOT' is invalid: file does not exist" | verify-true
		    get-item "Errors \\(5 items\\)" | get-property "getItems().TreeItem[1].getText()" 
		        | equals "Resource import 'Capture.JPG' is invalid: given file is not a Resource file" | verify-true
		    get-item "Errors \\(5 items\\)" | get-property "getItems().TreeItem[2].getText()" | equals "Resource import 't\\\\n"
		        + ".robot' is invalid: given location does not point to a file" | verify-true
		    get-item "Errors \\(5 items\\)" | get-property "getItems().TreeItem[3].getText()" 
		        | equals "The library name/path '%{HOME}/${CURDIR}/res2${/}res.robot' is parameterized. Some of used parameters cannot be resolved. Use Variable mappings in red.xml for parameter resolution" 
		        | verify-true
		    get-item "Errors \\(5 items\\)" | get-property "getItems().TreeItem[4].getText()" 
		        | equals "Unknown keyword 'from res 2'" | verify-true
		}
	}
	
	//remove ${execDir} and add {outputdir}
	with [get-editor "TestFile.robot" | get-text-viewer] {
	    set-caret-pos 18 35
	    key-type BackSpace
	    key-type BackSpace -times 21
	    type-text "outputdir}"
	    key-type "M1+s"
	}
	//check error to see path inside param
	wait 2000
	get-view Problems | get-tree 
	    | get-item "Errors \\(.* items\\)/.*is invalid: given location does not point to a file" 
	    | get-property caption 
	    | equals [format "Resource import '%s/MediumRobotTest' is invalid: given location does not point to a file" $project_path]
	    | verify-true
    
    //add file name and open decalraion
	with [get-editor "TestFile.robot" | get-text-viewer] {
	    set-caret-pos 18 23
	    type-text "/text_file.txt"
	    key-type "M1+s"
	    set-caret-pos 18 27
	    open-declaration
	}
	get-tab-folder -index 1 | get-property activePage | equals "text_file.txt" | verify-true
	
	//check this param in other porject
	get-view "Project Explorer" | get-tree | select "SecondProject/Script.robot" | double-click
	with [get-editor "Script.robot" | get-text-viewer] {
	    set-caret-pos 6 1
	    type-text "Resource    ${EXECDIR}"
	    key-type "M1+s"
	}
	wait 1000
		    
	get-view Problems | get-tree 
	    | get-item "Errors \\(.*\\)/Resource import '.*' is invalid: given location does not point to a file" 
	    | get-property caption 
	    | equals [format "Resource import '%s/SecondProject' is invalid: given location does not point to a file" $project_path]
	    | verify-true	   
		
	
	//remove enire line
	with [get-editor "Script.robot" | get-text-viewer] {
	    set-caret-pos 6 22
	    select-range 6 23 6 1
	    key-type BackSpace
	    key-type "M1+s"
    }
    //check that error not exists
    if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{ 
	    get-view Problems | get-label "6 errors, 0 warnings, 0 others" | get-property caption 
	    | equals "6 errors, 0 warnings, 0 others" | verify-true
    }-else{
	    get-view Problems | get-label "7 errors, 0 warnings, 0 others" | get-property caption 
		    | equals "7 errors, 0 warnings, 0 others" | verify-true
	    
    }
    //add resource with "{outputdir}"
	with [get-editor "Script.robot" | get-text-viewer] {
	    set-caret-pos 6 1
	    type-text "Resource   ${outputdir}"
	    key-type "M1+s"
	}
	wait 1000
		    
	get-view Problems | get-tree 
	    | get-item "Errors \\(.*\\)/Resource import '.*' is invalid: given location does not point to a file" 
	    | get-property caption 
	    | equals [format "Resource import '%s/SecondProject' is invalid: given location does not point to a file" $project_path]
	    | verify-true	   
	    
}
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
