--- RCPTT testcase ---
Format-Version: 1.0
Element-Name: DefaultErrorsAndWarnings
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _VMj88KTbEeazyPh6f3_hNQ
Runtime-Version: 2.1.0.201606221726
Save-Time: 11/8/16 12:19 PM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

proc "check-combobox-list-and-selection" [val section ""]  [val label ""] [val selected "Warning"] [val text ""]{
	with [get-window Preferences | get-section $section] {
	    with [get-combo -after [get-label $label]] {
	        get-property "values[0]" | equals Error | verify-true
	        get-property "values[1]" | equals Warning | verify-true
	        get-property "values[2]" | equals Info | verify-true
	        get-property "values[3]" | equals Ignore | verify-true
	    }
	get-combo -after [get-label $label] | get-property selection | equals $selected | verify-true
	}
	
	get-window Preferences | get-section $section | get-label $label
    	| get-property "getToolTipText()" 
    	| equals $text | verify-true
}

get-preferences-menu | click
get-window Preferences | get-tree | select "Robot Framework/Errors\\/Warnings"


with [get-window Preferences | get-control Any -after [get-label "Errors/Warnings"] -index 9] {
	
	//title
    get-property "getChildren().length" | equals 3 | verify-true
    get-property "getChildren().Control[0].getText()" | equals "RED validation settings" | verify-true
    
    //sections
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[0].getChildren().length" 
        | equals 7 | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[0].getChildren().Control[0].getText()" 
        | equals "Code style" | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[0].getChildren().Control[1].getText()" 
        | equals "Name shadowing and conflicts" | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[0].getChildren().Control[2].getText()" 
        | equals "Unnecessary code" | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[0].getChildren().Control[3].getText()" 
        | equals Import | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[0].getChildren().Control[4].getText()" 
        | equals "Robot version" | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[0].getChildren().Control[5].getText()" 
        | equals Runtime | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[0].getChildren().Control[6].getText()" 
        | equals "Project configuration" | verify-true
        
    //buttons    
    get-property "getChildren().Control[2].getChildren().length" | equals 2 | verify-true
    get-property "getChildren().Control[2].getChildren().Control[0].getText()" | equals "Restore &Defaults" 
        | verify-true
    get-property "getChildren().Control[2].getChildren().Control[1].getText()" | equals "&Apply" | verify-true
}

//check if are not expanded
with [get-window Preferences] {
    get-section "Code style" | get-link | get-property "isExpanded()" | equals false | verify-true
    get-section "Name shadowing and conflicts" | get-link | get-property "isExpanded()" | equals false | verify-true
    get-section "Unnecessary code" | get-link | get-property "isExpanded()" | equals false | verify-true
    get-section Import | get-link | get-property "isExpanded()" | equals false | verify-true
    get-section "Robot version" | get-link | get-property "isExpanded()" | equals false | verify-true
    get-section Runtime | get-link | get-property "isExpanded()" | equals false | verify-true
    get-section "Project configuration" | get-link | get-property "isExpanded()" | equals false | verify-true
}


//====================================== Code style ==============================================

get-window Preferences | get-section "Code style" | click

check-combobox-list-and-selection -section "Code style" -label "Keyword from nested library" -text  "This problem occurs when keyword imported by dependency is used in test suite." 

check-combobox-list-and-selection -section "Code style" -label "Keyword occurence not consistent with definition"
	 -text  "This problem occurs when name in keyword call is different than in definition. Use spaes in the same place like in definition."

check-combobox-list-and-selection -section "Code style" -label "Keyword name with dots"
	-text "This problem occurs when keyword name contains dots. It may be confused with fully qualified name." 

check-combobox-list-and-selection -section "Code style" -label "Variable given as keyword name"
	 -text  "This problem occurs when variable is used as keyword call in test suite setup or teardown." 

check-combobox-list-and-selection -section "Code style" -label  "Collection size should be equal to keyword arguments number" 
	  -text "This problems occurs when collection variable is used in keyword call."

check-combobox-list-and-selection -section "Code style" -label "Invalid time format"
	 -text "This problems occurs when time is not formatted correctly. Use number, time string or timer string." 


//====================================== Name shadowing and conflict =============================

with [get-window Preferences] {
    get-section "Code style" | click
    get-section "Name shadowing and conflicts" | click
}

get-window Preferences | get-section "Name shadowing and conflicts" | get-control Any -index 2 | get-property "getChildren().length" | equals 6 | verify-true

check-combobox-list-and-selection -section "Name shadowing and conflicts" -label "Duplicated variable name"
	 -text "This problems occurs when variable name is duplicated and one variable value overrides another." 

check-combobox-list-and-selection -section "Name shadowing and conflicts" -label "Duplicated test case name" 
	 -text "This problems occurs when test case name is duplicated and both test cases can be run."  

check-combobox-list-and-selection -section "Name shadowing and conflicts" -label "Masked keyword name"
	-text "This problems occurs when keyword defined in test suite has tse same name like keyword from imported library.\n"
            + "You can use fully qualified name when calling masked keyword." 


//====================================== Unnecessary code =============================

with [get-window Preferences] {
    get-section "Unnecessary code" | click
    get-section "Name shadowing and conflicts" | click
}

get-window Preferences | get-section "Unnecessary code" | get-control Any -index 2 | get-property "getChildren().length" | equals 8 | verify-true

check-combobox-list-and-selection -section "Unnecessary code" -label "Empty settings definition"
	-text "This problems occurs when suite, test case or keyword setting is defined with empty content." 

check-combobox-list-and-selection -section "Unnecessary code" -label "Unrecognized header type" 
	-text "This problems occurs when Robot Framework does not recognize section header.\n"
            + "Only ***Settings***, ***Variables***, ***Test Cases*** or ***Keywords*** sections are valid."

check-combobox-list-and-selection -section "Unnecessary code" -label "Duplicated configuration path"
	-text "This problem occurs when path defined in configuration is subpath of different one. Such path is skipped." 

check-combobox-list-and-selection -section "Unnecessary code" -label "Missing configuration path"
	-text "This problem occurs when missing path is defined in configuration. Such path is skipped." 



//====================================== Import  =============================

with [get-window Preferences] {
    get-section "Unnecessary code" | click
    get-section Import | click
}

get-window Preferences | get-section "Import" | get-control Any -index 2 | get-property "getChildren().length" | equals 6 | verify-true

check-combobox-list-and-selection -section "Import" -label "Absoulte path is used"
  	-text "This problems occurs when absoulte path is used. Workspace-relative paths are preferred in RED." 
  	
check-combobox-list-and-selection -section "Import" -label "HTML format is used"
  	-text "This problems occurs when imported file is in HTML format. Use supported formats only." 
  	
check-combobox-list-and-selection -section "Import" -label "Import path relative via modules path"
  	-text  "This problems occurs when imported path is relative to python path." 
  	
//====================================== Robot version  =============================  		

with [get-window Preferences] {
    get-section Import | click
    get-section "Robot version" | click
}  	
get-window Preferences | get-section "Robot version" | get-control Any -index 2 | get-property "getChildren().length" | equals 10 | verify-true
check-combobox-list-and-selection -section "Robot version" -label "Removed Robot Framework API used"
  	-text "This problems occurs when removed syntax is used. Use Robot Framework 3.0 syntax instead."  -selected "Error"
  	
check-combobox-list-and-selection -section "Robot version" -label "Unsupported Robot Framework API used"
  	-text "This problems occurs when syntax from newer Robot Framework version is not available in older version."  -selected "Error"  	 

check-combobox-list-and-selection -section "Robot version" -label "Deprecated Robot Framework API used"
  	-text  "This problems occurs when deprecated syntax is used. Use Robot Framework 3.0 syntax instead." 
  	 	
check-combobox-list-and-selection -section "Robot version" -label "Duplicated definitions used"
  	-text "This problems occurs when duplicated definition is used. It occures in older Robot Framework versions." 
  
check-combobox-list-and-selection -section "Robot version" -label "Incorrect variable initialization"
  	-text "This problems occurs when variable is incorrectly initialized. It occures in older Robot Framework versions." 
  	

//====================================== Runtime  =============================  
  	
with [get-window Preferences] {
    get-section Runtime | click
    get-section "Robot version" | click
}

check-combobox-list-and-selection -section Runtime -label "RED parser warning"
  	-text "This problems occurs when for some reason RED parser reports warning." 

//check that runtime error cannoytbe change  	
with [get-window Preferences | get-section Runtime] {
    get-label "Robort Framework runtime error" | get-property "getToolTipText()" 
        | equals "This problems occurs when incorrect Robot Framework syntax is isused. Such syntax will fail test in runtime." 
        | verify-true
    with [get-combo -after [get-label "Robort Framework runtime error"]] {
        get-property "values[0]" | equals Error | verify-true
        get-property "isEnabled()" | equals false | verify-true
    }
}


//====================================== "Project configuration"  =============================  

get-window Preferences | get-section "Project configuration" | click
with [get-window Preferences | get-section "Project configuration"] {
    get-label "Project configuration file (red.xml) cannot be read" | get-property "getToolTipText()" 
        | equals "This problem occurs when project has no red.xml configuration file or it cannot be read.\n"
        + "Either there is a problem accessing the file or its structure is broken." | verify-true
    get-label "Python Robot Framework environment missing" | get-property "getToolTipText()" 
        | equals "This problems occurs when there is no Robot Environment defined.\n"
        + "Python main directory with Robot modules installed should be defined in preferences.\n"
        + "Project may override this setting in its configuration file." | verify-true
    get-label "Library configuration file cannot be generated" | get-property "getToolTipText()" 
        | equals "This problems occurs when for some reason Robot framework is unable to generate library specification file." 
        | verify-true
    with [get-combo -after [get-label "Project configuration file (red.xml) cannot be read"]] {
        get-property selection | equals Fatal | verify-true
        get-property readOnly | equals true | verify-true
        get-property "values[0]" | equals Fatal | verify-true
    }
    with [get-combo -after [get-label "Python Robot Framework environment missing"]] {
        get-property selection | equals Fatal | verify-true
        get-property readOnly | equals true | verify-true
        get-property "values[0]" | equals Fatal | verify-true
    }
    with [get-combo -after [get-label "Library configuration file cannot be generated"]] {
        get-property selection | equals Fatal | verify-true
        get-property readOnly | equals true | verify-true
        get-property "values[0]" | equals Fatal | verify-true
    }
}  	

//expand few nad check scroll

with [get-window Preferences] {
    get-section "Robot version" | click
    get-section Import | click
}
with [get-window Preferences | get-control Any -after [get-label "Errors/Warnings"] -index 9] {
    get-property "getChildren().Control[1].getChildren().Control[0].getHorizontalBar().isVisible()" | equals false 
        | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getVerticalBar().isVisible()" | equals true 
        | verify-true
}
get-window Preferences | get-button OK | click  	
  	  	
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
