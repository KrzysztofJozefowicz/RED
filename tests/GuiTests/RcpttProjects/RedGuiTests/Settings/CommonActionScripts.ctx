--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: CommonActionScripts
Element-Type: context
Element-Version: 2.0
Id: _Qh0yIA9TEeWFTuCZGHkLuQ
Runtime-Version: 2.0.2.201511100828
Save-Time: 4/21/16 5:31 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

//--------------------------- settings -----------------------------------------------------------------------------------------------------------------------
//make full screen
get-eclipse-window | maximize 

proc "run-process-and-trim"  [val process ""] [val arg1 ""] [val arg2 ""] [val ignoreStderr false ] [val ignoreExitCode false] {
	exec-process  $process $arg1 $arg2  -ignoreStderr $ignoreStderr -ignoreExitCode $ignoreExitCode|  get stdout  |invoke trim 
}

//select path depends to operating system
proc "os-specific" [val windowsValue] [val linuxValue] 
{
	echo [get-by-os -win $windowsValue -linux $linuxValue]
}


//get python path: "C:\Pyhon27"
global [val python_exe_path [run-process-and-trim  "python" "-c"  "import sys,os.path; print os.path.dirname(sys.executable)" ]]

//get robot version:  "Robot Framework 3.0 (Python 2.7.8 on win32)" 
global [val robot_version [run-process-and-trim -process  [os-specific "pybot.bat"  "pybot" ] -arg1 "--version"  -ignoreStderr true -ignoreExitCode true ]]

//get jython path: "d:\jyton\jython2.7.0\bin\"
if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{
	global [val jython_path [run-process-and-trim  "python" "-c" "import os, sys; [sys.stdout.write(i.rstrip('\\/')) for i in os.environ['PATH'].split(os.pathsep) if i.find('jython')!=-1]"]]
}-else{
	global [val jython_path "/usr/local/bin"]
}

//jybot version: "Robot Framework 3.0 (Python 2.7.8 on win32)"
global [val jybot_version [run-process-and-trim -process  [os-specific "jybot.bat"  "jybot" ] -arg1 "--version"  -ignoreStderr true -ignoreExitCode true ]]


let [val temp [substitute-variables "${system_property:RCPPT_projectPath}"]]{
	if [$temp | equals ""] {
		global [val RCPTT_project_path $user_RCPTT_project_path]
	}-else{
		global [val RCPTT_project_path $temp]
	}
}

//set parameter is_product
substitute-variables "${eclipse_home}" | let [val eclipse_home_path -input]{
	if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{
		
		global [val is_product [get-file [uri-from-path [concat $eclipse_home_path "RED.exe" ]]| get exists ]]
		
	}-else{
		global [val is_product [get-file [uri-from-path [concat $eclipse_home_path "RED" ]]| get exists ]]
	
	}
}

global [val RED_workspace_path [get-workspace-location]]
global [val user_folder [get-java-property "user.home"]]

global [val sys_sep [os-specific "\\" "/"]]

//----------------------------procedures -----------------------------------------------------

proc CreateVariablesInTableEditor [val EditorTitle] {
	// input - Editor title - filename
	// editor must be opened beforehand , section need to be created
	
	//focus on editor file
	with [get-editor $EditorTitle] {
	    get-tab-folder | get-tab-item Variables | click}
	
	//create 2 variables
	with [get-editor $EditorTitle | get-table] {
	    get-cell 0 0 | double-click
	    get-cell 0 0 | mouse down -count 2
	    double-click
	    select "${var}" | activate-cell-edit
	    with [get-editbox] {
	        click-text 3 6
	        key-type "NUMPAD_ENTER" "\\u000D"
	    }
	    apply-cell-edit -deactivate
	}
	
	with [get-editor $EditorTitle | get-table] {
	    get-cell 1 0 | double-click
	    get-cell 1 0 | mouse down -count 2
	    double-click
	    select "${var1}" | activate-cell-edit
	    with [get-editbox] {
	        click-text 3 6
	        key-type "NUMPAD_ENTER" "\\u000D"
	    }
	    apply-cell-edit -deactivate
	}
}

proc "add-variable" [val list_of_variables] [val script_name]{

	with [get-editor $script_name] {
	    get-tab-folder | get-tab-item Variables | click
	   
	   $list_of_variables| each [val variable_name] [val index]{
		    with [get-table] {
		        select "...add new scalar" | key-type Enter
		        get-item ".*" -index $index | activate-cell-edit
		        with [get-editbox] {
		            set-text $variable_name
		            key-type Enter
		        }
		        apply-cell-edit -deactivate
			}
			
		}
		
	}
}

proc "add-value-to-variable" [val list_of_values] [val script_name]{

	with [get-editor $script_name] {
	    get-tab-folder | get-tab-item Variables | click
	    //this is workaround to scroll up
	    get-table | select ".*"
	   	$list_of_values| each [val variable_value] [val index]{
		   	with [get-table] {
		        select [get-item ".*" -index $index] | double-click
		      	select [get-item ".*"  -index $index] | activate-cell-edit -column 1
		        with [get-editbox] {
		            set-text $variable_value
		            key-type Enter
		        }
		        apply-cell-edit -deactivate
	    	}
		}	
	}
}




proc "add-comment-to-variable" [val list_of_comments] [val script_name]{

	with [get-editor $script_name] {
	    get-tab-folder | get-tab-item Variables | click
	 	//this is workaround to scroll up
	    get-table | select ".*"
	   	$list_of_comments| each [val comment_text] [val index]{
		   	with [get-table] {
		        select [get-item ".*" -index $index]| double-click
		      	select [get-item ".*" -index $index]| activate-cell-edit -column 02
		        with [get-editbox] {
        			set-text $comment_text
        			key-type "NUMPAD_ENTER" "\\u000D"
    			}
		        apply-cell-edit -deactivate
	    	}
		}	
	}
}

//---------------------------- Edit Varaible view in Variable view ----------------------------------

// -------------- list ------------------------------------------------------------------------
proc "add-value-to_list-in-EditVariable" [val list_of_values] [val script_name]{
    $list_of_values| each [val value] [val index]{
	with [get-editor $script_name| get-section "Edit Variable" | get-table] {
    	select "...add new element" -column Value| key-type Right| key-type Enter
	    select $index| activate-cell-edit -column 1
	    with [get-editbox] {
	        set-text $value
	        key-type Enter
	    }
	    apply-cell-edit -deactivate
	   } 
	}
}

// -------------- dictionary ------------------------------------------------------------------------
proc "add-keys-to_dictionary-in-EditVariable" [val list_of_keys] [val script_name]{
    $list_of_keys| each [val key] [val index]{
	with [get-editor $script_name| get-section "Edit Variable" | get-table] {
    	select "...add new element" -column Key| key-type Right| key-type Enter
	    select [plus $index 1]| activate-cell-edit -column 1
	    with [get-editbox] {
	        set-text $key
	        key-type Enter
	    }
	    apply-cell-edit -deactivate
	   } 
	}
}

proc "add-values-to_dictionary-in-EditVariable" [val list_of_values] [val script_name]{
    $list_of_values| each [val value] [val index]{
	with [get-editor $script_name| get-section "Edit Variable" | get-table] {
 
	    select [plus $index 1]| activate-cell-edit -column 2
	    with [get-editbox] {
	        set-text $value
	        key-type Enter
	    }
	    apply-cell-edit -deactivate
	   } 
	}
}




proc Create2MetadataInTableEditor [val EditorTitle]{
// create 2 variables in table editor Vriables tab
// input - Editor title - filename
// editor must be opened beforehand , section need to be created


	with [get-editor $EditorTitle] {
		get-tab-folder | get-tab-item Settings | click
		get-section General | click
		 with [get-section Metadata] {
        click
       	}
		
		}

	with [get-editor $EditorTitle | get-section Metadata | get-table] {
		get-cell 0 0 | double-click
		get-cell 0 0 | mouse down -count 2
		double-click
		select "data" | activate-cell-edit
		with [get-editbox] {
			set-text data1
			key-type Enter
		}

		apply-cell-edit -deactivate
	}


	with [get-editor $EditorTitle | get-section Metadata | get-table] {
		select data1 | double-click
		select data1 | activate-cell-edit -column 1
		with [get-editbox] {
			set-text "data-value1"
			key-type Enter
		}
		apply-cell-edit -deactivate
	}

	with [get-editor $EditorTitle | get-section Metadata | get-table] {
		get-cell 1 0 | double-click
		get-cell 1 0 | mouse down -count 2
		double-click
		select "data" | activate-cell-edit
		with [get-editbox] {
			set-text data2
			key-type Enter
		}

		apply-cell-edit -deactivate
	}



	with [get-editor $EditorTitle | get-section Metadata | get-table] {
		select data2 | double-click
		select data2 | activate-cell-edit -column 1
		with [get-editbox] {
				set-text "data-value2"
				key-type Enter
    	}
    	apply-cell-edit -deactivate
	}
}



//concatenate strings in list with regex to check MEssage Log view (for short log)
proc concat_str_with_regex [val log_list]
{
	concat [$log_list |each [val single ] 
	{
		concat $msg_log_regex_INFO $single
	}] 

}


proc "check-debug-marker-on-ruler" [val line] [val script_name]{
	get-tab-folder -index 2 | get-property activePage | equals $script_name | verify-true
 	loop [val index 0]{
	 	try -times 1 -command{
			get-editor $script_name | get-text-viewer | get-property [format "markers['%s'][%s].text" $line $index] -raw
			| let [val marker -input]{
				if [ $marker | not-eq "Debug Current Instruction Pointer" ] {  
					recur [$index | plus 1]
				}
	
			}
 		}-catch{
 			str "a" | equals "b" |assert-true -message [format "There was no debug marker in line %s!! " $line]
 		}
	}

}

proc replace [val input] [val old] [val new]{
	$input |str| invoke replace $old $new

}


proc "compare-message-log2" [val ref_content]{
	get-view "Message Log" | get-editbox | get-property text -raw| let [val original_content -input]
	{
		if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{
			exec-process [format "\"python.exe\"  \"%s/Settings/PythonScripts/compare_msg_log_as_strings.py\"  \"%s\" \"%s\""   $user_RCPTT_project_path $original_content $ref_content ]
			| let [val result [ get stdout] ]{
			 $result | equals "OK!\r\n" | assert-true -message [format "Message was: %s" $result]
			 }
	
		}-else{
			exec-process [format "python"  "%s/Settings/PythonScripts/compare_msg_log_as_strings.py"  "%s" "%s"   $user_RCPTT_project_path $original_content $ref_content ]
			| let [val result [ get stdout] ]{
			 $result | equals "OK!\n" | assert-true -message [format "Message was: %s" $result]
			 }
		}	
	}

}

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
