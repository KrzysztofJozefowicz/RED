--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: CommonActionScripts
Element-Type: context
Element-Version: 2.0
Id: _Qh0yIA9TEeWFTuCZGHkLuQ
Runtime-Version: 2.0.0.201506120617
Save-Time: 7/6/15 3:28 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc CreateVariablesInTableEditor [val EditorTitle] {
	// input - Editor title - filename
	// editor must be opened beforehand , section need to be created
	
	//focus on editor file
	with [get-editor $EditorTitle] {
	    get-tab-folder | get-tab-item Variables | click}
	
	//create 2 variables
	with [get-editor $EditorTitle | get-table] {
	    get-cell 0 0 | double-click
	    get-cell 0 0 | mouse down -count 2
	    double-click
	    select "${var}" | activate-cell-edit
	    with [get-editbox] {
	        click-text 3 6
	        key-type "NUMPAD_ENTER" "\\u000D"
	    }
	    apply-cell-edit -deactivate
	}
	
	with [get-editor $EditorTitle | get-table] {
	    get-cell 1 0 | double-click
	    get-cell 1 0 | mouse down -count 2
	    double-click
	    select "${var1}" | activate-cell-edit
	    with [get-editbox] {
	        click-text 3 6
	        key-type "NUMPAD_ENTER" "\\u000D"
	    }
	    apply-cell-edit -deactivate
	}
}

proc "add-variable" [val list_of_variables] [val script_name]{

	with [get-editor $script_name] {
	    get-tab-folder | get-tab-item Variables | click
	   
	   $list_of_variables| each [val variable_name] [val index]{
		    with [get-table] {
		        select "...add new scalar" | key-type Enter
		        get-item ".*" -index $index | activate-cell-edit
		        with [get-editbox] {
		            set-text $variable_name
		            key-type Enter
		        }
		        apply-cell-edit -deactivate
			}
			
		}
		
	}
}

proc "add-value-to-variable" [val list_of_values] [val script_name]{

	with [get-editor $script_name] {
	    get-tab-folder | get-tab-item Variables | click
	 
	   	$list_of_values| each [val variable_value] [val index]{
		   	with [get-table] {
		        get-item ".*" -index $index | double-click
		      	get-item ".*"  -index $index | activate-cell-edit -column 1
		        with [get-editbox] {
		            set-text $variable_value
		            key-type Enter
		        }
		        apply-cell-edit -deactivate
	    	}
		}	
	}
}


proc "add-comment-to-variable" [val list_of_comments] [val script_name]{

	with [get-editor $script_name] {
	    get-tab-folder | get-tab-item Variables | click
	 
	   	$list_of_comments| each [val comment_text] [val index]{
		   	with [get-table] {
		        get-item ".*" -index $index| double-click
		      	get-item ".*" -index $index| activate-cell-edit -column 02
		        with [get-editbox] {
        			set-text $comment_text
        			key-type "NUMPAD_ENTER" "\\u000D"
    			}
		        apply-cell-edit -deactivate
	    	}
		}	
	}
}

//---------------------------- Edit Varaible view in Variable view ----------------------------------

// -------------- list ------------------------------------------------------------------------
proc "add-value-to_list-in-EditVariable" [val list_of_values] [val script_name]{
    $list_of_values| each [val value] [val index]{
	with [get-editor $script_name| get-section "Edit Variable" | get-table] {
    	select "...add new element" -column Value| key-type Right| key-type Enter
	    select $index| activate-cell-edit -column 1
	    with [get-editbox] {
	        set-text $value
	        key-type Enter
	    }
	    apply-cell-edit -deactivate
	   } 
	}
}

// -------------- dictionary ------------------------------------------------------------------------
proc "add-keys-to_dictionary-in-EditVariable" [val list_of_keys] [val script_name]{
    $list_of_keys| each [val key] [val index]{
	with [get-editor $script_name| get-section "Edit Variable" | get-table] {
    	select "...add new element" -column Key| key-type Right| key-type Enter
	    select [plus $index 1]| activate-cell-edit -column 1
	    with [get-editbox] {
	        set-text $key
	        key-type Enter
	    }
	    apply-cell-edit -deactivate
	   } 
	}
}

proc "add-values-to_dictionary-in-EditVariable" [val list_of_values] [val script_name]{
    $list_of_values| each [val value] [val index]{
	with [get-editor $script_name| get-section "Edit Variable" | get-table] {
 
	    select [plus $index 1]| activate-cell-edit -column 2
	    with [get-editbox] {
	        set-text $value
	        key-type Enter
	    }
	    apply-cell-edit -deactivate
	   } 
	}
}
proc Create2MetadataInTableEditor [val EditorTitle]{
// create 2 variables in table editor Vriables tab
// input - Editor title - filename
// editor must be opened beforehand , section need to be created


	with [get-editor $EditorTitle] {
		get-tab-folder | get-tab-item Settings | click
		get-section General | click
		 with [get-section Metadata] {
        click
       	}
		
		}

	with [get-editor $EditorTitle | get-section Metadata | get-table] {
		get-cell 0 0 | double-click
		get-cell 0 0 | mouse down -count 2
		double-click
		select "data" | activate-cell-edit
		with [get-editbox] {
			set-text data1
			key-type Enter
		}

		apply-cell-edit -deactivate
	}


	with [get-editor $EditorTitle | get-section Metadata | get-table] {
		select data1 | double-click
		select data1 | activate-cell-edit -column 1
		with [get-editbox] {
			set-text "data-value1"
			key-type Enter
		}
		apply-cell-edit -deactivate
	}

	with [get-editor $EditorTitle | get-section Metadata | get-table] {
		get-cell 1 0 | double-click
		get-cell 1 0 | mouse down -count 2
		double-click
		select "data" | activate-cell-edit
		with [get-editbox] {
			set-text data2
			key-type Enter
		}

		apply-cell-edit -deactivate
	}



	with [get-editor $EditorTitle | get-section Metadata | get-table] {
		select data2 | double-click
		select data2 | activate-cell-edit -column 1
		with [get-editbox] {
				set-text "data-value2"
				key-type Enter
    	}
    	apply-cell-edit -deactivate
	}
}

//get python path
if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{
	global [val python_exe_path [exec-process  "\"python.exe\"" "-c"  "\"import sys,os.path; print os.path.dirname(sys.executable)\"" | get stdout]]

}-else{
	global [val python_exe_path [exec-process  "python" "-c"  "import sys,os.path; print os.path.dirname(sys.executable)"  | get stdout]]
}	


//get robot version
if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{
	global [val robot_version [exec-process "\"pybot.bat\"" "\"--version\"" -ignoreStderr -ignoreExitCode | get stdout  |split -sep "!"   -trimResults]]

}-else{
	global [val robot_version [exec-process  "pybot" "--version"  -ignoreStderr -ignoreExitCode  | get stdout |split -sep "!"   -trimResults]]
}	


let [val temp [substitute-variables "${system_property:RCPPT_projectPath}"]]{
	if [$temp | equals ""] {
		global [val RCPTT_project_path $user_RCPTT_project_path]
	}-else{
		global [val RCPTT_project_path $temp]
	}
}

//concatenate strings in list with regex to check MEssage Log view (for short log)
proc concat_str_with_regex [val log_list]
{
	concat [$log_list |each [val single ] 
	{
		concat $msg_log_regex_INFO $single
	}] 

}

//select path depends to operating system
proc "os-specific" [val windowsValue] [val linuxValue] 
{
	echo [get-by-os -win $windowsValue -linux $linuxValue]
}


proc "check_if_line_is_highlighted" [val line] [val script_name]{
	repeat [val index] -times  [get-editor $script_name | get-text-viewer | get-property "getLineCount()" -raw | int] -command
	{
		if [$index | not-eq [minus $line 1]] {
	  		get-editor $script_name |get-text-viewer| get-object |  invoke  getLineBackground $index  |  assert-empty -message [format "Expected no line highlighting in line: %s!" [plus $index 1 ]]
	  		
		}-else{
			get-editor $script_name |get-text-viewer| get-object |  invoke  getLineBackground $index | invoke toString  | str | equals "Color {198, 219, 174}" 
			| assert-true -message [format "Background color in line %s is not green!"  [plus $index 1]]
			}	
	}
}

proc replace [val input] [val old] [val new]{

	if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{
		exec-process  "\"python.exe\"" "-c"  "\"import sys; print sys.argv[1].replace(sys.argv[2], sys.argv[3])\"" $input $old $new | get stdout 

	}-else{
		exec-process  "python.exe" "-c"  "import sys; print sys.argv[1].replace(sys.argv[2], sys.argv[3])" $input $old $new | get stdout 
	}	

}


------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
