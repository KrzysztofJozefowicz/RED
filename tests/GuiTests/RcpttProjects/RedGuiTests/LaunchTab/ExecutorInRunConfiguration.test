--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _nus0MPsuEeW7_PzjO98BIw,_d8aMACuvEeW667Afdo4DcA
Element-Name: ExecutorInRunConfiguration
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _QcX10PsxEeW7_PzjO98BIw
Runtime-Version: 2.1.0.201606221726
Save-Time: 3/21/17 11:33 AM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

//run test
get-view "Project Explorer" | get-tree | select "SecondProject/SingleTest.tsv" | get-menu "Run As/1 Robot Test" | click

//check if python was used
get-view Console | get-label ".*" -index 0 
	    | get-property caption | equals [format "<terminated> SingleTest.tsv [Robot] %s%s" $python_exe_path [os-specific "\python.exe" "/python"]] | verify-true
get-view Console | get-text-viewer | get-object |invoke getLine 1 | contains "Python" |verify-true  

get-menu "Run/Run Configurations..." | click
get-window "Run Configurations" | get-tab-folder | get-tab-item Executor | click
//select other interpreter
with [get-window "Run Configurations"] {
    get-tree | select "Robot/SingleTest.tsv"
    get-group Interpreter | get-button Use | click
}
//check info for user 
get-window "Run Configurations" | get-editbox -after [get-label "Create, manage, and run configurations"] 
    | get-property text 
    | equals "Tests will be launched using 'Python' interpreter as defined in PATH environment variable." | verify-true
    
//check python interpreter    
get-window "Run Configurations" | get-group Interpreter | get-button "Check interpreter" | click


//check if robot version is shown
with [get-window "Run Configurations" | get-window "Progress Information" | get-window "Interpreter checked"] {
    get-property title | equals "Interpreter checked" | verify-true
    get-label ".*" -index 1 | get-property caption 
        | equals [format "The Python interpreter has %s installed" $robot_version] | verify-true
}
//select IronPython
with [get-window "Run Configurations"] {
    get-window "Progress Information" | get-window "Interpreter checked" | get-button OK | click
    get-group Interpreter | get-combo | select IronPython
}
//check if text was changed as information to user
get-window "Run Configurations" | get-editbox -after [get-label "Create, manage, and run configurations"] 
    | get-property text 
    | equals "Tests will be launched using 'IronPython' interpreter as defined in PATH environment variable." 
    | verify-true
    
//select Check interpreter and check error    
exec-with-options {
    get-window "Run Configurations" | get-group Interpreter | get-button "Check interpreter" | click
    get-window "Run Configurations" | get-window "Problem Occurred" 
        | get-label "Unable to find ipy(.exe)? executable in the system." | get-property caption 
        | equals "Unable to find ipy(.exe)? executable in the system." | verify-true
    get-window "Run Configurations" | get-window "Problem Occurred" 
        | get-label "There is no IronPython interpreter in system PATH environment variable" | get-property caption 
        | equals "There is no IronPython interpreter in system PATH environment variable" | verify-true
    get-window "Run Configurations" | get-window "Problem Occurred" | get-button "Details >>" | click
    get-window "Run Configurations" | get-window "Problem Occurred" | get-editbox 
        -after [get-label "There is no IronPython interpreter in system PATH environment variable"] | get-property text 
        | equals "Unable to find ipy(.exe)? executable in the system.\n"
        + "There is no IronPython interpreter in system PATH environment variable" | verify-true
   get-window "Run Configurations" | get-window "Problem Occurred" | get-button OK | click
} -allowStatusDialog


//select Jython
get-window "Run Configurations" | get-group Interpreter | get-combo | select Jython

//check user info
get-window "Run Configurations" | get-editbox -after [get-label "Create, manage, and run configurations"] 
    | get-property text 
    | equals "Tests will be launched using 'Jython' interpreter as defined in PATH environment variable." | verify-true

//run test    
get-window "Run Configurations" | get-button Run | click

try -times 8 -delay 2000 -command{
	get-view Console | get-button Terminate | get-property "isEnabled()" | equals false | verify-true
}
	
get-view "Message Log" | get-editbox | get-property text | equals "Starting test: SecondProject.SingleTest.test1\n"
    + ".* : INFO : 12\n"
    + "Ending test: SecondProject.SingleTest.test1\n\n"
    + "Starting test: SecondProject.SingleTest.test2\n"
    + ".* : INFO : 13\n"
    + "Ending test: SecondProject.SingleTest.test2" | verify-true

//check that jytohn was used
get-view Console | get-label ".*" -index 0 
    | get-property caption | equals [format "<terminated> SingleTest.tsv [Robot] %s" [os-specific "jython.exe" "jython"]] | verify-true
    
//check from console
get-view Console | get-text-viewer | get-object |invoke getLine 1 | contains "Jython" |verify-true    
//select PyPy    
get-menu "Run/Run Configurations..." | click
get-window "Run Configurations" | get-tab-folder | get-tab-item Executor | click
with [get-window "Run Configurations"] {
    get-group Interpreter | get-combo | select PyPy
    get-button Apply | click
}

//run test and check error
exec-with-options {
    get-window "Run Configurations" | get-button Run | click
    wait 500
    //first label
    get-window "Problem Occurred" | get-label "'Launching SingleTest.tsv' has encountered a problem." 
        | get-property caption | equals "'Launching SingleTest.tsv' has encountered a problem." | verify-true
    //second label below    
    get-window "Problem Occurred" | get-label "There is no PyPy interpreter in system PATH environment variable" 
        | get-property caption | equals "There is no PyPy interpreter in system PATH environment variable" | verify-true
        
    //detailes    
    get-window "Problem Occurred" | get-button "Details >>" | click
    get-window "Problem Occurred" | get-editbox 
        -after [get-label "There is no PyPy interpreter in system PATH environment variable"] | get-property text 
        | equals "'Launching SingleTest.tsv' has encountered a problem.\n"
        + "There is no PyPy interpreter in system PATH environment variable" | verify-true
        get-window "Problem Occurred" | get-button OK | click
    
} -allowStatusDialog

//changed interpreter to jython in red.xml
get-view "Project Explorer" | get-tree | select "SecondProject/red.xml" | double-click
with [get-editor "SecondProject/red.xml" | get-section "Robot framework"] {
    get-button "Use local settings for this project" | check
    with [get-table] {
        get-item "Robot Framework .*\\(Jython .*\\)" | check
        key-type "M1+s"
    }
}

get-editor "SecondProject/red.xml" | get-section "Robot framework" | get-table 
    | get-item "Robot Framework .*\\(Jython .*\\)" | get-property "values['Path']" -raw | let [val jython_path -input]{
    
	//open run configuration and change to use interpreter from project
	get-menu "Run/Run Configurations..." | click
	get-window "Run Configurations" | get-tab-folder | get-tab-item Executor | click
	with [get-window "Run Configurations"] {
	    get-group Interpreter | get-button "Use interpreter as defined in project configuration" | click
	    get-button Run | click
	}
	try -times 5 -delay 1000 -command{
		get-view Console | get-button Terminate | get-property "isEnabled()" | equals false | verify-true
	}
	get-view Console | get-label ".*" -index 0 
	    | get-property caption | equals [format "<terminated> SingleTest.tsv [Robot] %s%s" $jython_path [os-specific "\jython.exe" "/jython"]] | verify-true 
	}    
    
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
