--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _nus0MPsuEeW7_PzjO98BIw,_d8aMACuvEeW667Afdo4DcA
Element-Name: MainRunConfigurationTab
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _9aBo4JQ7EeWNpL9oeriwCw
Runtime-Version: 2.1.0.201606221726
Save-Time: 1/18/17 2:23 PM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

// run script to get Script.robot run configuration
get-view "Project Explorer" | get-tree | select  "MediumRobotTest/Script.robot" | get-menu "Run As/1 Robot Test" | click

// check if Robot entry is visible in Run Configurations
get-menu "Run/Run Configurations..." | click
get-window "Run Configurations" | get-tree | select "Robot/Script.robot" |click

get-window "Run Configurations" | get-editbox -after [get-label "Create, manage, and run configurations"] 
    | get-property text | equals "Create or edit a configuration to launch Robot Framework tests" | verify-true

//check tabs
with [get-window "Run Configurations"] {
    with [get-tab-folder] {
        get-property "pages[0]" | equals Main | verify-true
        get-property "pages[1]" | equals Remote | verify-true
        get-property "pages[2]" | equals Source | verify-true
        get-property "pages[3]" | equals Environment | verify-true
        get-property "pages[4]" | equals "&Common" | verify-true
        get-property activePage | equals Main | verify-true
        get-property tabCount | equals 5 | verify-true
    }
    
    //check test name
    get-label "Name:" | get-property caption | equals "&Name:" | verify-true
    with [get-editbox -after [get-label "Name:"]] {
        get-property text | equals "Script.robot" | verify-true
        get-property "getEditable()" | equals true | verify-true
    }
    
    //executor part
    with [get-group Executor] {
        get-property childCount | equals 5 | verify-true
        with [get-button "Use interpreter as defined in project configuration"] {
            get-property selected | equals true | verify-true
            get-property kind | equals Radio | verify-true
        }
        with [get-button Use] {
            get-property selected | equals false | verify-true
            get-property kind | equals Radio | verify-true
        }
        with [get-combo] {
            get-property selection | equals Python | verify-true
            get-property readOnly | equals true | verify-true
            get-property "values[0]" | equals Python | verify-true
            get-property "values[1]" | equals Jython | verify-true
            get-property "values[2]" | equals IronPython | verify-true
            get-property "values[3]" | equals PyPy | verify-true
        }
        get-label "interpreter taken from sytem PATH environment variable" | get-property caption 
            | equals "interpreter taken from sytem PATH environment variable" | verify-true
        with [get-button "Check interpreter"] {
            get-property enablement | equals false | verify-true
            get-property caption | equals "Check interpreter" | verify-true
        }
        get-label "Additional interpreter arguments:" | get-property caption 
            | equals "Additional interpreter arguments:" | verify-true
        with [get-editbox -after [get-label "Additional interpreter arguments:"]] {
            get-property enablement | equals true | verify-true
            get-property text | equals "" | verify-true
        }
        get-label "Additional Robot Framework arguments:" | get-property caption 
            | equals "Additional Robot Framework arguments:" | verify-true
        with [get-editbox -after [get-label "Additional Robot Framework arguments:"]] {
            get-property enablement | equals true | verify-true
            get-property text | equals "" | verify-true
        }
    }
    
    //check Tags
    with [get-group Tags] {
        get-property childCount | equals 4 | verify-true
        with [get-button "Only run tests with these tags:"] {
            get-property caption | equals "Only run tests with these tags:" | verify-true
            get-property selected | equals false | verify-true
        }
        get-editbox | get-property text | equals "" | verify-true
        with [get-button "Skip tests with these tags:"] {
            get-property selected | equals false | verify-true
            get-property kind | equals Check | verify-true
        }
        get-editbox -index 1 | get-property text | equals "" | verify-true
    }
    
    //check Project
    with [get-group Project] {
        get-property childCount | equals 2 | verify-true
        get-property "getChildren().Control[0].getText()" | equals MediumRobotTest | verify-true
        get-property "getChildren().Control[0].getEditable()" | equals true | verify-true
        get-property "getChildren().Control[1].getText()" | equals "Browse..." | verify-true
        get-property "getChildren().Control[1].isEnabled()" | equals true | verify-true
    }
    
    //check Test Suite
    with [get-group "Test Suite(s)"] {
        with [get-tree] {
            get-property itemCount | equals 1 | verify-true
            get-property "getItems().TreeItem[0].getText()" | equals "Script.robot" | verify-true
        }
        get-button "Browse..." | get-property enablement | equals true | verify-true
        get-button Remove | get-property enablement | equals true | verify-true
        get-button "Select All" | get-property enablement | equals true | verify-true
    }
    //check buttons
    get-button Revert | get-property enablement | equals false | verify-true
    get-button Apply | get-property enablement | equals false | verify-true
    get-button Run | get-property enablement | equals true | verify-true
    get-button Close | get-property enablement | equals true | verify-true
}

//change configuration name an run test
get-menu "Run/Run Configurations..." | click
get-window "Run Configurations" | get-tree | select "Robot/Script.robot"
with [get-window "Run Configurations"] {
    get-editbox -after [get-label "Name:"] | set-text "newName.robot"
    get-button Apply | click
    get-button Run | click
}
//check execution view
wait 3000
with [get-view "Execution View" | get-tree] {
    get-item "MediumRobotTest \\(.* s\\)/Script \\(.* s\\)/CAPITAL LETTER \\(.* s\\)" | get-property childCount 
        | equals 0 | verify-true
    get-item "MediumRobotTest \\(.* s\\)/Script \\(.* s\\)/test1 \\(.* s\\)" | get-property index | equals 1 
        | verify-true
    get-item "MediumRobotTest \\(.* s\\)/Script \\(.* s\\)" | get-property childCount | equals 2 | verify-true
}

//add new empty run configuration
get-menu "Run/Run Configurations..." | click
get-window "Run Configurations" | get-button "New launch configuration" | click
with [get-window "Run Configurations"] {
    with [get-editbox -after [get-label "Name:"]] {
        get-property enablement | equals true | verify-true
        get-property text | equals "New_configuration" | verify-true
    }
    with [get-group Executor] {
        get-button "Use interpreter as defined in project configuration" | get-property selected | equals true 
            | verify-true
        get-editbox -after [get-label "Additional interpreter arguments:"] | get-property text | equals "" | verify-true
        get-editbox -after [get-label "Additional Robot Framework arguments:"] | get-property text | equals "" 
            | verify-true
    }
    with [get-group Tags] {
        get-button "Only run tests with these tags:" | get-property selected | equals false | verify-true
        get-button "Skip tests with these tags:" | get-property selected | equals false | verify-true
    }
    get-group Project | get-editbox | get-property text | equals "" | verify-true
    get-group "Test Suite(s)" | get-tree | get-property itemCount | equals 0 | verify-true
}

//select test without selecting project
get-window "Run Configurations" | get-group "Test Suite(s)" | get-button "Browse..." | click
with [get-window "Run Configurations" | get-window "Select test suite"] {
    get-tree | get-property itemCount | equals 0 | verify-true
    get-label "No entries available." | get-property caption | equals "No entries available." | verify-true
    get-button OK | get-property enablement | equals false | verify-true
    get-button Cancel | get-property enablement | equals true | verify-true
    get-button Cancel | click
}

//select project
with [get-window "Run Configurations"] {
    get-group Project | get-button "Browse..." | click
}

//check that are 2 projects
with [get-window "Run Configurations" | get-window "Select project" | get-tree] {
    get-property itemCount | equals 2 | verify-true
    get-property "getItems().TreeItem[0].getText()" | equals MediumRobotTest | verify-true
    get-property "getItems().TreeItem[1].getText()" | equals SecondProject | verify-true
}
//select second project
with [get-window "Run Configurations"] {
    with [get-window "Select project"] {
        get-tree | select SecondProject
        get-button OK | click
    }
    
    //select test from project
    get-group "Test Suite(s)" | get-button "Browse..." | click
}

//check that is only one porject in window
with [get-window "Run Configurations" | get-window "Select test suite" | get-tree] {
    get-property itemCount | equals 1 | verify-true
    get-property "getItems().length" | equals 1 | verify-true
}

//check how many items from project are shown
get-window "Run Configurations" | get-window "Select test suite" | get-tree | select "SecondProject/SingleTest.tsv"
get-window "Run Configurations" | get-window "Select test suite" | get-tree 
    | get-property "getItems().TreeItem[0].getItemCount()" | equals 4 | verify-true
    
//select tsv file    
get-window "Run Configurations" | get-window "Select test suite" | get-tree | select "SecondProject/SingleTest.tsv" 
    | double-click

//check that 2 tests are shown to be selected    
with [get-window "Run Configurations" | get-group "Test Suite(s)" | get-tree] {
    get-item "SingleTest.tsv" | get-property checked | equals true | verify-true
    get-item "SingleTest.tsv/test1" | get-property checked | equals false | verify-true
    get-item "SingleTest.tsv/test2" | get-property checked | equals false | verify-true
}
with [get-window "Run Configurations" | get-group "Test Suite(s)" | get-tree] {
    get-property "getItems().TreeItem[0].getText()" | equals "SingleTest.tsv" | verify-true
    get-property "getItems().TreeItem[0].getItems().TreeItem[0].getText()" | equals test1 | verify-true
    get-property "getItems().TreeItem[0].getItems().TreeItem[1].getText()" | equals test2 | verify-true
    get-property "getItems().TreeItem[0].getItemCount()" | equals 2 | verify-true
}
//select only on test (test1) and run 
with [get-window "Run Configurations"] {
    get-group "Test Suite(s)" | get-tree | get-item "SingleTest.tsv/test1" | check
    get-button Apply | click
    get-button Run | click
}

wait 2000
//check execution view
with [get-view "Execution View" | get-tree] {
    get-item "SecondProject \\(.* s\\)/SingleTest \\(.* s\\)" | get-property childCount | equals 1 | verify-true
    get-item "SecondProject \\(.* s\\)/SingleTest \\(.* s\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "test1 \\(.* s\\)" | verify-true
}

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
